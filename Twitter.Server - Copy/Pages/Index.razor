@page "/"
@using Newtonsoft.Json
@using System.Text
@using System.Text.RegularExpressions
@using Twitter.Core.Data
@using Twitter.BlazorServer.Service
@using Twitter.Model
@using Twitter.Core.Extentions;
@inject ITweetService tweetService

<h1>Tweets Streaming</h1>

<button  class="btn btn-primary" @onclick="TwitterCount">Get Tweet Counts</button>
<button class="btn btn-danger" @onclick="StopTwitterCount">Cancel</button>

<p>Tweets Fetched: @tweetCounts</p>

@foreach(string ht in @topTenHashTags.Take(10))
    {
        <li>@ht</li>
    }

@code{
    int tweetCounts;
    string tweet = string.Empty;
    string errorMessage = string.Empty;
    CancellationTokenSource? cts = null;
    HashSet<string> topTenHashTags = new HashSet<string>();
    List<SearchStreamResult> tweets = new List<SearchStreamResult>();
    HttpResponseMessage? response = null;
    StreamReader? reader = null;
    Stream? content = null;

    protected override async Task OnInitializedAsync()
    {
        this.StateHasChanged();
    }


    async Task TwitterCount()
    {
        tweetCounts = 0;

        topTenHashTags = new HashSet<string>();
        try
        {
            response = await tweetService.GetTweetSearchStreamResponseAsync();
            content = await response.Content.ReadAsStreamAsync();
            reader = new StreamReader(content);
            cts = new CancellationTokenSource();

            if (cts.Token.IsCancellationRequested)
            {
                return;
            }

            while (!reader.EndOfStream)
            {
                var tweet = reader.ReadLineAsync().Result;
                tweetCounts = tweetCounts + 1;
                StateHasChanged();
                if (tweet != null)
                    CollectHashTags(tweet);

                // Use can utilize these tweets to save to the database using the entity framework setup in this project. TODO
                SearchStreamResult searchStreamResult = JsonConvert.DeserializeObject<SearchStreamResult>(tweet);
                if (searchStreamResult != null)
                    tweets.Add(searchStreamResult);
            }
        }
        catch (Exception ex)
        {
            Console.Write($"Error occured: {ex.Message}");
            throw;

        }
        finally
        {
            if (response != null)
                response.Dispose();
            if (reader != null)
                reader.Dispose();
            if (content != null)
                await content.DisposeAsync();

        }
    }


    // Cancel the request
    void StopTwitterCount() {
        cts?.Cancel();
        topTenHashTags = new HashSet<string>();
        tweetCounts = 0;
        StateHasChanged();
    }

    void CollectHashTags(string tweet)
    {

        var regex = new Regex(@"#\w+");
        var matches = regex.Matches(tweet);
        foreach (var match in matches)
        {
            if (!topTenHashTags.Contains(match))
            {
                topTenHashTags.Add(match.ToString());
                StateHasChanged();
            }
        }

    }

 }