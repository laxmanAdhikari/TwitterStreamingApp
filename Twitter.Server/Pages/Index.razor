@page "/"
@using Newtonsoft.Json
@using System.Text
@using System.Text.RegularExpressions
@using Tweetinvi
@using Tweetinvi.Models
@using Tweetinvi.Streaming.V2
@using Twitter.Core.Constants
@using Twitter.Core.Data
@using Twitter.BlazorServer.Service
@using Twitter.Model
@using Twitter.Core.Extentions;
@using Radzen;
@using Radzen.Blazor;
@inject ITweetService tweetService

<h1>Tweets Streaming</h1>

<button  class="btn btn-primary" @onclick="GetTweetStreams">Get Tweet Counts</button>

@if (@tweetCounts > 0)
{
    <RadzenCard>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Class="mr-1" > 
            Number of tweets fetched
        <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="@tweetCounts.ToString()" />
       </RadzenButton>
    </RadzenCard>
}

@if (@topTenHashTags.Count > 0)
{
    <p> Top 10 HashTags:</p>
    @foreach (string tags in @topTenHashTags)
    {
        <li>@tags</li>
    }
}

@if(processStarted && fetchedTweets.Count < 0 )
{
     <p><em>Could not fetch tweet at this time. Please try later !!!</em></p>
}
else
{
    List<Tweet> tweets = (from x in fetchedTweets select x.Tweet).ToList();
    @if (tweets.Count > 0)
    {
        <header>
            <div class="alert-primary" align="center"><h1> Tweets Summary</h1></div>
        </header>   
        <RadzenDataGrid Data="@tweets" TItem="Tweet"  AllowFiltering="false" AllowPaging="true" AllowSorting="false" >
            <Columns>
                <RadzenDataGridColumn  Width="200px" TItem="Tweet" Property="Id" Title="Tweet ID">
                    <FooterTemplate>
                        Total records: <b>@tweets.Count()</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn  Width="600px"   TItem="Tweet" Property="Text" Title="Tweet Text" />
                <RadzenDataGridColumn  Width="200px" TItem="Tweet" Property="AuthorId" Title="Author ID" />
                <RadzenDataGridColumn  Width="200px" TItem="Tweet" Property="Created" Title="Created Date" />

            </Columns>
        </RadzenDataGrid>
    }

}


@code{
    int tweetCounts = 0;
    bool processStarted = false;
    HashSet<string> topTenHashTags = new HashSet<string>();
    List<SearchStreamResult> fetchedTweets = new List<SearchStreamResult>();
    ISampleStreamV2? sampleStreamV2 = null;


    void CollectHashTags(string tweet)
    {

        var regex = new Regex(@"#\w+");
        var matches = regex.Matches(tweet);
        foreach (var match in matches)
        {
            if (!topTenHashTags.Contains(match) && topTenHashTags.Count < 10)
            {
                topTenHashTags.Add(match.ToString());
                InvokeAsync(() => StateHasChanged());
            }
        }

    }

    async Task GetTweetStreams()
    {
        processStarted = true;
        DotNetEnv.Env.TraversePath().Load();
        var appCredentials = new ConsumerOnlyCredentials(Environment.GetEnvironmentVariable(TwitterConstants.CONSUMER_KEY),
                       Environment.GetEnvironmentVariable(TwitterConstants.CONSUMER_SECRET))
            {
                BearerToken = Environment.GetEnvironmentVariable(TwitterConstants.BEARER_TOKEN)
            };
        var appClient = new TwitterClient(appCredentials);
        sampleStreamV2 = appClient.StreamsV2.CreateSampleStream();

        sampleStreamV2.EventReceived += (sender, args) =>
        {
            tweetCounts = tweetCounts + 1;

            if (args != null)
                CollectHashTags(args.Json);

        // Use can utilize these tweets to save to the database using the entity framework setup in this project. TODO
        if (args != null && args.Json != null)
            {
                SearchStreamResult searchStreamResult = JsonConvert.DeserializeObject<SearchStreamResult>(args.Json);
                if (searchStreamResult != null)
                    fetchedTweets.Add(searchStreamResult);
            }            

            InvokeAsync(() => StateHasChanged());
        };
        await sampleStreamV2.StartAsync();
    }

    //Not used for this time
    //async Task TwitterCount()
    //{
    //    tweetCounts = 0;
    //    //Not Used for this time
    //HttpResponseMessage? streamResponse = null;
    //StreamReader? streamReader = null;
    //Stream? streamContent = null;
    //string tweet = string.Empty;


    //    topTenHashTags = new HashSet<string>();
    //    try
    //    {
    //       streamResponse = await tweetService.GetTweetSearchStreamResponseAsync();
    //        streamContent = await streamResponse.Content.ReadAsStreamAsync();
    //        streamReader = new StreamReader(streamContent);

    //        string? tweetLine = null;

    //        while((tweetLine = streamReader.ReadLine()) !=null)
    //        {
    //            tweet = streamReader.ReadLineAsync().Result;
    //            tweetCounts = tweetCounts + 1;
    //            StateHasChanged();
    //            if (tweet != null)
    //                CollectHashTags(tweet);

    //            // Use can utilize these tweets to save to the database using the entity framework setup in this project. TODO
    //            SearchStreamResult searchStreamResult = JsonConvert.DeserializeObject<SearchStreamResult>(tweet);
    //            if (searchStreamResult != null)
    //                tweets.Add(searchStreamResult);
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        Console.Write($"Error occured: {ex.Message}");
    //        throw;

    //    }
    //    finally
    //    {
    //        if (streamResponse != null)
    //            streamResponse.Dispose();
    //        if (streamReader != null)
    //            streamReader.Dispose();
    //        if (streamContent != null)
    //            await streamContent.DisposeAsync();

    //    }
    //}

 }